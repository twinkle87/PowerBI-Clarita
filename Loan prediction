{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyN7cS1yi1O33lWvJFwodCu6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/twinkle87/PowerBI-Clarita/blob/main/Loan%20prediction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "BtfY9OSOeF0t"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import missingno as mso\n",
        "import seaborn as sns\n",
        "\n",
        "from scipy import stats\n",
        "from scipy.stats import pearsonr\n",
        "from scipy.stats import ttest_ind\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.naive_bayes import CategoricalNB\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"/content/train.csv\")\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "9xCalwxrxoUl",
        "outputId": "1716d7af-0d43-4d9f-ad6b-78661576088d"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n",
              "0  LP001002   Male      No          0      Graduate            No   \n",
              "1  LP001003   Male     Yes          1      Graduate            No   \n",
              "2  LP001005   Male     Yes          0      Graduate           Yes   \n",
              "3  LP001006   Male     Yes          0  Not Graduate            No   \n",
              "4  LP001008   Male      No          0      Graduate            No   \n",
              "\n",
              "   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
              "0             5849                0.0         NaN             360.0   \n",
              "1             4583             1508.0       128.0             360.0   \n",
              "2             3000                0.0        66.0             360.0   \n",
              "3             2583             2358.0       120.0             360.0   \n",
              "4             6000                0.0       141.0             360.0   \n",
              "\n",
              "   Credit_History Property_Area Loan_Status  \n",
              "0             1.0         Urban           Y  \n",
              "1             1.0         Rural           N  \n",
              "2             1.0         Urban           Y  \n",
              "3             1.0         Urban           Y  \n",
              "4             1.0         Urban           Y  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6827636f-25c2-4373-9cbc-e365937eaf5a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loan_ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Married</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>Education</th>\n",
              "      <th>Self_Employed</th>\n",
              "      <th>ApplicantIncome</th>\n",
              "      <th>CoapplicantIncome</th>\n",
              "      <th>LoanAmount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "      <th>Property_Area</th>\n",
              "      <th>Loan_Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LP001002</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>5849</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>LP001003</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4583</td>\n",
              "      <td>1508.0</td>\n",
              "      <td>128.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>N</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>LP001005</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>66.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>LP001006</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>2583</td>\n",
              "      <td>2358.0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>LP001008</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>6000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>141.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>Y</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6827636f-25c2-4373-9cbc-e365937eaf5a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6827636f-25c2-4373-9cbc-e365937eaf5a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6827636f-25c2-4373-9cbc-e365937eaf5a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# New Section"
      ],
      "metadata": {
        "id": "IApnzuHBE98q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (df.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "alzy7dIjyYuv",
        "outputId": "7bce1079-96d5-4be4-a87e-9d55eeeb99b5"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(614, 13)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.Loan_ID.value_counts(dropna=False) \t"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WEqjfYHtymYk",
        "outputId": "ba2e63d1-bdea-4c94-9a77-e5e44d3770a4"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LP001002    1\n",
              "LP002328    1\n",
              "LP002305    1\n",
              "LP002308    1\n",
              "LP002314    1\n",
              "           ..\n",
              "LP001692    1\n",
              "LP001693    1\n",
              "LP001698    1\n",
              "LP001699    1\n",
              "LP002990    1\n",
              "Name: Loan_ID, Length: 614, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.Gender.value_counts(dropna=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A3hGTCUozxKR",
        "outputId": "84dcb425-cda9-4272-f938-ad10aa868dd8"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Male      489\n",
              "Female    112\n",
              "NaN        13\n",
              "Name: Gender, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x=\"Gender\", data=df, palette=\"hls\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "kRyaLD0e0DRW",
        "outputId": "743d4f57-e3a6-4666-ec7c-0b0d01b35781"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "countMale = len(df[df.Gender == 'Male'])\n",
        "countFemale = len(df[df.Gender == 'Female'])\n",
        "countNull = len(df[df.Gender.isnull()])\n",
        "print(\"Percent of Male applicant: {:.2f}%\".format((countMale / (len(df.Gender))*100)))\n",
        "print(\"Percent of Female applicant: {:.2f}%\".format((countFemale / (len(df.Gender))*100)))\n",
        "print(\"percent of Missing values: {:.2f}%\".format((countNull / (len(df.Gender))*100)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TsdMnEwq0dNs",
        "outputId": "e4142c81-0e1f-493d-a16e-a14b566ec1ba"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Percent of Male applicant: 79.64%\n",
            "Percent of Female applicant: 18.24%\n",
            "percent of Missing values: 2.12%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.Married.value_counts(dropna=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oHdMrn1d08fI",
        "outputId": "cfce2821-d62e-48e8-ed79-0a4f3173e5b5"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Yes    398\n",
              "No     213\n",
              "NaN      3\n",
              "Name: Married, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x=\"Married\", data=df, palette=\"Paired\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "2FPtos_T1QyN",
        "outputId": "20ff06f7-3c72-40f5-d991-ae949dd9f6d9"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "countMarried = len(df[df.Married == 'Yes'])\n",
        "countNotMarried = len(df[df.Married == 'No'])\n",
        "countNull = len(df[df.Married.isnull()])\n",
        "\n",
        "print(\"Percent of married: {:.2f}%\".format((countMarried / (len(df.Married))*100)))\n",
        "print(\"Percent of Not married applicant: {:.2f}%\".format((countNotMarried / (len(df.Married))*100)))\n",
        "print(\"percent of Missing values: {:.2f}%\".format((countNull / (len(df.Married))*100)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nlAY6xPc2P3l",
        "outputId": "2e648dc9-cd53-4ee0-9d6b-1653b8c994b4"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Percent of married: 64.82%\n",
            "Percent of Not married applicant: 34.69%\n",
            "percent of Missing values: 0.49%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.Credit_History.value_counts(dropna=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J_iHBvpz3IQd",
        "outputId": "e408f146-7692-434b-ce63-d9c6801e7056"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0    475\n",
              "0.0     89\n",
              "NaN     50\n",
              "Name: Credit_History, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x=\"Credit_History\", data=df, palette=\"viridis\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        },
        "id": "64Btq7zD3QGD",
        "outputId": "99214399-c575-46f7-8830-463fb1961d00"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "count1 = len(df[df.Credit_History == 1])\n",
        "count0 = len(df[df.Credit_History == 0])\n",
        "countNull = len(df[df.Credit_History.isnull()])\n",
        "\n",
        "print(\"Percent of Good credit history: {:.2f}%\".format((count1 / (len(df.Credit_History))*100)))\n",
        "print(\"Percentof Bad credit history: {:.2f}%\".format((count0 / (len(df.Credit_History))*100)))\n",
        "print(\"Percent of Missing values: {:.2f}%\".format((countNull / (len(df.Credit_History))*100)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zvdbdGGl3bFD",
        "outputId": "88c7b19b-b6ba-48c8-b2c6-44feca0d2bd8"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Percent of Good credit history: 77.36%\n",
            "Percentof Bad credit history: 14.50%\n",
            "Percent of Missing values: 8.14%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.Loan_Status.value_counts(dropna=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bQ1mbw-43qHa",
        "outputId": "2ad2872f-866c-4b35-f9bd-0b7ffa2bb8e9"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Y    422\n",
              "N    192\n",
              "Name: Loan_Status, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x=\"Loan_Status\", data=df, palette=\"YlOrBr\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        },
        "id": "1rxk1_gF3y2d",
        "outputId": "15caf41d-724b-4f47-9902-bbe4463878c9"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEHCAYAAABBW1qbAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAATWklEQVR4nO3de7Bd5X3e8e+DwGAHzE3HFEuaiomVutiJZeYUk7oXF5oGyEXEtSmML6rDVPYUx3ZzqcEzbXAmtE6nmBgnoSMXG+G4wdSOjeIhaSkmTpmWywHLMggzUTAMUmV0DAIbu1Yq+PWP/WqxEUfSEWjtfdD+fmb27LXe911r/47mwHPWbb+pKiRJAjhs3AVIkhYOQ0GS1DEUJEkdQ0GS1DEUJEmdw8ddwIuxePHiWr58+bjLkKSXlLvvvvu7VTU1V99LOhSWL1/OzMzMuMuQpJeUJA/vrc/TR5KkjqEgSeoYCpKkjqEgSeoYCpKkjqEgSeoYCpKkjqEgSeoYCpKkzkv6ieaD4bu3XzruErQALT7j34+7BGksPFKQJHUMBUlSx1CQJHUMBUlSx1CQJHUMBUlSp/dQSLIoydeTfKWtn5LkjiSbk3w+ycta+5FtfXPrX953bZKk5xrFkcIHgfuH1n8HuLKqXgPsAC5q7RcBO1r7lW2cJGmEeg2FJEuBnwP+c1sPcCbwhTZkHXBeW17V1mn9Z7XxkqQR6ftI4XeBfw0809ZPBJ6oql1tfQuwpC0vAR4BaP1PtvGSpBHpLRSS/DywvaruPsj7XZNkJsnM7Ozswdy1JE28Po8U3gz8YpKHgOsZnDb6BHBckt3fubQU2NqWtwLLAFr/scBje+60qtZW1XRVTU9NTfVYviRNnt5CoaouraqlVbUcuAD4alW9A7gVeFsbthq4sS2vb+u0/q9WVfVVnyTp+cbxnMKHgV9NspnBNYNrWvs1wImt/VeBS8ZQmyRNtJF8dXZV/Tnw5235QeD0Ocb8CHj7KOqRJM3NJ5olSR1DQZLUMRQkSR1DQZLUMRQkSR1DQZLUMRQkSR1DQZLUMRQkSR1DQZLUMRQkSR1DQZLUMRQkSR1DQZLUMRQkSR1DQZLU6S0UkhyV5M4k30hyX5KPtvZrk3w7yYb2Wtnak+SqJJuTbExyWl+1SZLm1ufMazuBM6vqqSRHALcl+dPW9xtV9YU9xp8DrGivNwFXt3dJ0oj0dqRQA0+11SPaq/axySrgurbd7cBxSU7uqz5J0vP1ek0hyaIkG4DtwM1VdUfrurydIroyyZGtbQnwyNDmW1rbnvtck2Qmyczs7Gyf5UvSxOk1FKrq6apaCSwFTk/yeuBS4LXA3wFOAD58gPtcW1XTVTU9NTV10GuWpEk2kruPquoJ4Fbg7Kra1k4R7QQ+A5zehm0Flg1ttrS1SZJGpM+7j6aSHNeWXw78DPCt3dcJkgQ4D7i3bbIeeHe7C+kM4Mmq2tZXfZKk5+vz7qOTgXVJFjEInxuq6itJvppkCgiwAXhfG38TcC6wGfgh8J4ea5MkzaG3UKiqjcAb52g/cy/jC7i4r3okSfvnE82SpI6hIEnqGAqSpI6hIEnqGAqSpI6hIEnqGAqSpI6hIEnqGAqSpI6hIEnqGAqSpI6hIEnqGAqSpI6hIEnqGAqSpE6fM68dleTOJN9Icl+Sj7b2U5LckWRzks8neVlrP7Ktb279y/uqTZI0tz6PFHYCZ1bVG4CVwNltms3fAa6sqtcAO4CL2viLgB2t/co2TpI0Qr2FQg081VaPaK8CzgS+0NrXMZinGWBVW6f1n9XmcZYkjUiv1xSSLEqyAdgO3Az8FfBEVe1qQ7YAS9ryEuARgNb/JHBin/VJkp6r11CoqqeraiWwFDgdeO2L3WeSNUlmkszMzs6+6BolSc8ayd1HVfUEcCvw08BxSQ5vXUuBrW15K7AMoPUfCzw2x77WVtV0VU1PTU31XrskTZI+7z6aSnJcW3458DPA/QzC4W1t2Grgxra8vq3T+r9aVdVXfZKk5zt8/0NesJOBdUkWMQifG6rqK0k2Adcn+W3g68A1bfw1wGeTbAYeBy7osTZJ0hx6C4Wq2gi8cY72BxlcX9iz/UfA2/uqR5K0fz7RLEnqGAqSpI6hIEnqGAqSpI6hIEnqGAqSpI6hIEnqGAqSpI6hIEnqGAqSpI6hIEnqGAqSpI6hIEnqGAqSpI6hIEnqGAqSpE6f03EuS3Jrkk1J7kvywdZ+WZKtSTa017lD21yaZHOSB5L8bF+1SZLm1ud0nLuAX6uqe5IcA9yd5ObWd2VV/cfhwUlOZTAF5+uAVwP/I8lPVNXTPdYoSRrS25FCVW2rqnva8veB+4El+9hkFXB9Ve2sqm8Dm5lj2k5JUn9Gck0hyXIG8zXf0Zren2Rjkk8nOb61LQEeGdpsC3OESJI1SWaSzMzOzvZYtSRNnt5DIcnRwBeBD1XV94CrgR8HVgLbgCsOZH9Vtbaqpqtqempq6qDXK0mTrNdQSHIEg0D4XFX9MUBVPVpVT1fVM8CnePYU0VZg2dDmS1ubJGlE5hUKSW6ZT9se/QGuAe6vqo8PtZ88NOyXgHvb8nrggiRHJjkFWAHcOZ/6JEkHxz7vPkpyFPAKYHE795/W9Ur2fdEY4M3Au4BvJtnQ2j4CXJhkJVDAQ8B7AarqviQ3AJsY3Ll0sXceSdJo7e+W1PcCH2Jwi+jdPBsK3wN+b18bVtVtQ+OH3bSPbS4HLt9PTZKknuwzFKrqE8AnkvxKVX1yRDVJksZkXg+vVdUnk/xdYPnwNlV1XU91SZLGYF6hkOSzDG4j3QDsPs9fgKEgSYeQ+X7NxTRwalVVn8VIksZrvs8p3Av8jT4LkSSN33yPFBYDm5LcCezc3VhVv9hLVZKksZhvKFzWZxGSpIVhvncffa3vQiRJ4zffu4++z+BuI4CXAUcAP6iqV/ZVmCRp9OZ7pHDM7uX2nUargDP6KkqSNB4H/C2pNfBlwOkyJekQM9/TR28dWj2MwXMLP+qlIknS2Mz37qNfGFrexeDbTVcd9GokSWM132sK7+m7EEnS+M13kp2lSb6UZHt7fTHJ0r6LkySN1nwvNH+Gwcxor26vP2lte5VkWZJbk2xKcl+SD7b2E5LcnOQv2/vxrT1JrkqyOcnGJKe98B9LkvRCzDcUpqrqM1W1q72uBab2s80u4Neq6lQGt69enORU4BLglqpaAdzS1gHOYTAF5wpgDXD1gf0okqQXa76h8FiSdyZZ1F7vBB7b1wZVta2q7mnL3wfuZzCF5ypgXRu2DjivLa8Crmu3vN4OHLfHfM6SpJ7NNxR+GTgf+A6wDXgb8M/n+yFJlgNvBO4ATqqqba3rO8BJbXkJ8MjQZlvY/zzQkqSDaL6h8FvA6qqaqqpXMQiJj85nwyRHA18EPlRV3xvua/MzHNAcDUnWJJlJMjM7O3sgm0qS9mO+ofBTVbVj90pVPc7gL/99SnIEg0D4XFX9cWt+dPdpofa+vbVvBZYNbb60tT1HVa2tqumqmp6a2t9lDUnSgZhvKBy2+y4hGNxBxH6ecWjfkXQNcH9VfXyoaz2wui2vBm4can93uwvpDODJodNMkqQRmO8TzVcA/zvJf23rbwcu3882bwbeBXwzyYbW9hHgY8ANSS4CHmZwrQLgJuBcYDPwQ8AH5iRpxOb7RPN1SWaAM1vTW6tq0362uQ3IXrrPmmN8ARfPpx5pEtz+L//2uEvQAnTGH9zf6/7ne6RAC4F9BoEk6aXtgL86W5J06DIUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1OktFJJ8Osn2JPcOtV2WZGuSDe117lDfpUk2J3kgyc/2VZckae/6PFK4Fjh7jvYrq2ple90EkORU4ALgdW2bP0iyqMfaJElz6C0UquovgMfnOXwVcH1V7ayqbzOYp/n0vmqTJM1tHNcU3p9kYzu9dHxrWwI8MjRmS2t7niRrkswkmZmdne27VkmaKKMOhauBHwdWAtuAKw50B1W1tqqmq2p6amrqYNcnSRNtpKFQVY9W1dNV9QzwKZ49RbQVWDY0dGlrkySN0EhDIcnJQ6u/BOy+M2k9cEGSI5OcAqwA7hxlbZIkOLyvHSf5I+AtwOIkW4DfBN6SZCVQwEPAewGq6r4kNwCbgF3AxVX1dF+1SZLm1lsoVNWFczRfs4/xlwOX91WPJGn/fKJZktQxFCRJHUNBktQxFCRJHUNBktQxFCRJHUNBktQxFCRJHUNBktQxFCRJHUNBktQxFCRJHUNBktQxFCRJHUNBktQxFCRJnd5CIcmnk2xPcu9Q2wlJbk7yl+39+NaeJFcl2ZxkY5LT+qpLkrR3fR4pXAucvUfbJcAtVbUCuKWtA5zDYF7mFcAa4Ooe65Ik7UVvoVBVfwE8vkfzKmBdW14HnDfUfl0N3A4cl+TkvmqTJM1t1NcUTqqqbW35O8BJbXkJ8MjQuC2t7XmSrEkyk2Rmdna2v0olaQKN7UJzVRVQL2C7tVU1XVXTU1NTPVQmSZNr1KHw6O7TQu19e2vfCiwbGre0tUmSRmjUobAeWN2WVwM3DrW/u92FdAbw5NBpJknSiBze146T/BHwFmBxki3AbwIfA25IchHwMHB+G34TcC6wGfgh8J6+6pIk7V1voVBVF+6l66w5xhZwcV+1SJLmxyeaJUkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEkdQ0GS1DEUJEmd3uZT2JckDwHfB54GdlXVdJITgM8Dy4GHgPOrasc46pOkSTXOI4V/VFUrq2q6rV8C3FJVK4Bb2rokaYQW0umjVcC6trwOOG+MtUjSRBpXKBTw35PcnWRNazupqra15e8AJ821YZI1SWaSzMzOzo6iVkmaGGO5pgD8varamuRVwM1JvjXcWVWVpObasKrWAmsBpqen5xwjSXphxnKkUFVb2/t24EvA6cCjSU4GaO/bx1GbJE2ykYdCkh9LcszuZeCfAPcC64HVbdhq4MZR1yZJk24cp49OAr6UZPfn/5eq+rMkdwE3JLkIeBg4fwy1SdJEG3koVNWDwBvmaH8MOGvU9UiSnrWQbkmVJI2ZoSBJ6hgKkqSOoSBJ6hgKkqSOoSBJ6hgKkqSOoSBJ6hgKkqSOoSBJ6hgKkqSOoSBJ6hgKkqSOoSBJ6hgKkqSOoSBJ6iy4UEhydpIHkmxOcsm465GkSbKgQiHJIuD3gXOAU4ELk5w63qokaXIsqFAATgc2V9WDVfXXwPXAqjHXJEkTY+RzNO/HEuCRofUtwJuGByRZA6xpq08leWBEtU2CxcB3x13EwvCxcReg5/J3c7erczD28jf31rHQQmG/qmotsHbcdRyKksxU1fS465D25O/m6Cy000dbgWVD60tbmyRpBBZaKNwFrEhySpKXARcA68dckyRNjAV1+qiqdiV5P/DfgEXAp6vqvjGXNUk8LaeFyt/NEUlVjbsGSdICsdBOH0mSxshQkCR1DIUJl4Hbkpwz1Pb2JH82zrokgCSV5Iqh9V9PctkYSzrkGQoTrgYXld4HfDzJUUmOBv4dcPF4K5MA2Am8NcnicRcyKQwFUVX3An8CfBj4t8B1VfVX461KAmAXgzuP/tW4C5kUC+qWVI3VR4F7gL8GfHJUC8nvAxuT/IdxFzIJDAUBUFU/SPJ54Kmq2jnueqTdqup7Sa4DPgD833HXc6jz9JGGPdNe0kLzu8BFwI+Nu5BDnaEgacGrqseBGxgEg3pkKEh6qbiCwVdoq0d+zYUkqeORgiSpYyhIkjqGgiSpYyhIkjqGgiSpYyhIkjqGgg55SZ4a8ecdluSqJPcm+WaSu5Kc0vo+Ms99zGucdLD5nIIOeUmeqqqjR/h5FwL/FDi/qp5JshT4QVXtmG8to65Z2s0jBU2kJCuT3J5kY5IvJTm+tf+L9pf9N5J8MckrWvu17a///5XkwSRv28fuTwa2VdUzAFW1pQXCx4CXJ9mQ5HNtv19OcneS+5KsaW3PGZdkeZJ7h2rvJppJ8oEkm9rPcX0P/1SaMB4p6JA311/dSTYCv1JVX0vyW8Arq+pDSU6sqsfamN8GHq2qTya5lsGXsf0z4LXA+qp6zV4+bylwG/AEcAvwh1X19blqSXJCVT2e5OXAXcA/rKrHhsclWQ58pape39Z/HTi6qi5L8n+AU6pqZ5LjquqJg/KPponlkYImTpJjgeOq6mutaR3wD9ry65P8zyTfBN4BvG5o0y9X1TNVtQk4aW/7r6otwN8CLmXwrbO3JDlrL8M/kOQbwO3AMmDFAf44G4HPJXkngwlppBfFUJCe61rg/VX1kwwmHjpqqG94nonsaydVtbOq/rSqfoPB9Kbn7TkmyVuAfwz8dFW9Afj6Hp+32y6e+9/q8JifYzAJzWnAXUmcI0UviqGgiVNVTwI7kvz91vQuYPdRwzHAtiRHMDhSOGBJTkvy6rZ8GPBTwMOt+/+1fQMcC+yoqh8meS1wxtBuhsc9CrwqyYlJjgR+fmjfy6rqVgZTqR4LeHFaL4p/VWgSvCLJlqH1jwOrgf/ULiQ/CLyn9f0b4A5gtr0f8wI+71XAp9r/wAHuBH6vLa9lMLXkPcAvA+9Lcj/wAINTSOw5rqre0a573AlsBb7VxiwC/rCdDgtwldcU9GJ5oVmS1PH0kSSp4+kj6QVK8pPAZ/do3llVbxpHPdLB4OkjSVLH00eSpI6hIEnqGAqSpI6hIEnq/H8VzVZv/ggO1gAAAABJRU5ErkJggg==\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "countY = len(df[df.Loan_Status == 'Y'])\n",
        "countN = len(df[df.Loan_Status == 'N'])\n",
        "countNull = len(df[df.Loan_Status.isnull()])\n",
        "\n",
        "print(\"Percent of Approved: {:.2f}%\".format((countY / (len(df.Loan_Status))*100)))\n",
        "print(\"Percent of Rejected: {:.2f}%\".format((countN / (len(df.Loan_Status))*100)))\n",
        "print(\"Percent of Missing values: {:.2f}%\".format((countNull / (len(df.Loan_Status))*100)))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LcXmBSup333T",
        "outputId": "cf577f9a-f25b-476b-bc58-86c5e67b2ed6"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Percent of Approved: 68.73%\n",
            "Percent of Rejected: 31.27%\n",
            "Percent of Missing values: 0.00%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.Loan_Amount_Term.value_counts(dropna=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FfStysla4OeR",
        "outputId": "5b2d6eb5-0187-40a8-fdc6-b962703fda57"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "360.0    512\n",
              "180.0     44\n",
              "480.0     15\n",
              "NaN       14\n",
              "300.0     13\n",
              "240.0      4\n",
              "84.0       4\n",
              "120.0      3\n",
              "60.0       2\n",
              "36.0       2\n",
              "12.0       1\n",
              "Name: Loan_Amount_Term, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x=\"Loan_Amount_Term\", data=df, palette=\"rocket\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        },
        "id": "ug9aIbRW4WZu",
        "outputId": "0e6e876b-b928-46ee-b0e7-3ad9b6c523ef"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "count12 = len(df[df.Loan_Amount_Term == 12.0])\n",
        "count36 = len(df[df.Loan_Amount_Term == 36.0])\n",
        "count60 = len(df[df.Loan_Amount_Term == 60.0])\n",
        "count84 = len(df[df.Loan_Amount_Term == 84.0])\n",
        "count120 = len(df[df.Loan_Amount_Term == 120.0])\n",
        "count180 = len(df[df.Loan_Amount_Term == 180.0])\n",
        "count240 = len(df[df.Loan_Amount_Term == 240.0])\n",
        "count300 = len(df[df.Loan_Amount_Term == 300.0])\n",
        "count360 = len(df[df.Loan_Amount_Term == 360.0])\n",
        "count480 = len(df[df.Loan_Amount_Term == 480.0])\n",
        "countNull = len(df[df.Loan_Amount_Term.isnull()])\n",
        "\n",
        "print(\"Percentage of 12: {:.2f}%\".format((count12 / (len(df.Loan_Amount_Term))*100)))\n",
        "print(\"Percentage of 36: {:.2f}%\".format((count36 / (len(df.Loan_Amount_Term))*100)))\n",
        "print(\"Percentage of 60: {:.2f}%\".format((count60 / (len(df.Loan_Amount_Term))*100)))\n",
        "print(\"Percentage of 84: {:.2f}%\".format((count84 / (len(df.Loan_Amount_Term))*100)))\n",
        "print(\"Percentage of 120: {:.2f}%\".format((count120 / (len(df.Loan_Amount_Term))*100)))\n",
        "print(\"Percentage of 180: {:.2f}%\".format((count180 / (len(df.Loan_Amount_Term))*100)))\n",
        "print(\"Percentage of 240: {:.2f}%\".format((count240 / (len(df.Loan_Amount_Term))*100)))\n",
        "print(\"Percentage of 300: {:.2f}%\".format((count300 / (len(df.Loan_Amount_Term))*100)))\n",
        "print(\"Percentage of 360: {:.2f}%\".format((count360 / (len(df.Loan_Amount_Term))*100)))\n",
        "print(\"Percentage of 480: {:.2f}%\".format((count480 / (len(df.Loan_Amount_Term))*100)))\n",
        "print(\"Missing values percentage: {:.2f}%\".format((countNull / (len(df.Loan_Amount_Term))*100)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VBg_HmCA4fD5",
        "outputId": "a9fe78cf-eacf-4d7b-f7fa-1b03f6d6ad50"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Percentage of 12: 0.16%\n",
            "Percentage of 36: 0.33%\n",
            "Percentage of 60: 0.33%\n",
            "Percentage of 84: 0.65%\n",
            "Percentage of 120: 0.49%\n",
            "Percentage of 180: 7.17%\n",
            "Percentage of 240: 0.65%\n",
            "Percentage of 300: 2.12%\n",
            "Percentage of 360: 83.39%\n",
            "Percentage of 480: 2.44%\n",
            "Missing values percentage: 2.28%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[['ApplicantIncome','CoapplicantIncome','LoanAmount']].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "uFUG2Ed14nqK",
        "outputId": "c3f905e5-cc24-49f1-9590-c44e39e772ec"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       ApplicantIncome  CoapplicantIncome  LoanAmount\n",
              "count       614.000000         614.000000  592.000000\n",
              "mean       5403.459283        1621.245798  146.412162\n",
              "std        6109.041673        2926.248369   85.587325\n",
              "min         150.000000           0.000000    9.000000\n",
              "25%        2877.500000           0.000000  100.000000\n",
              "50%        3812.500000        1188.500000  128.000000\n",
              "75%        5795.000000        2297.250000  168.000000\n",
              "max       81000.000000       41667.000000  700.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-144aae85-5a7f-40e4-a682-3d8e736ff6b3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ApplicantIncome</th>\n",
              "      <th>CoapplicantIncome</th>\n",
              "      <th>LoanAmount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>614.000000</td>\n",
              "      <td>614.000000</td>\n",
              "      <td>592.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>5403.459283</td>\n",
              "      <td>1621.245798</td>\n",
              "      <td>146.412162</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>6109.041673</td>\n",
              "      <td>2926.248369</td>\n",
              "      <td>85.587325</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>150.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>9.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2877.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>100.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3812.500000</td>\n",
              "      <td>1188.500000</td>\n",
              "      <td>128.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>5795.000000</td>\n",
              "      <td>2297.250000</td>\n",
              "      <td>168.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>81000.000000</td>\n",
              "      <td>41667.000000</td>\n",
              "      <td>700.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-144aae85-5a7f-40e4-a682-3d8e736ff6b3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-144aae85-5a7f-40e4-a682-3d8e736ff6b3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-144aae85-5a7f-40e4-a682-3d8e736ff6b3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,7))\n",
        "sns.heatmap(df.corr(), annot=True, cmap='inferno');"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 519
        },
        "id": "Wl2vUk8K5ngP",
        "outputId": "5eb8717a-f886-4eed-8a1b-9670f5c81c1d"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x504 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.Self_Employed.value_counts(dropna=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oTM6yx-M5_lz",
        "outputId": "27d2da6a-c07b-4138-9835-e2d3e2b5e081"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "No     500\n",
              "Yes     82\n",
              "NaN     32\n",
              "Name: Self_Employed, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x=\"Self_Employed\", data=df, palette=\"crest\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        },
        "id": "W7TbLI0x6kHq",
        "outputId": "53380509-924b-4af2-aa0f-d424dbfa47b5"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "countNo = len(df[df.Self_Employed == 'No'])\n",
        "countYes = len(df[df.Self_Employed == 'Yes'])\n",
        "countNull = len(df[df.Self_Employed.isnull()])\n",
        "\n",
        "print(\"Percentage of Not self employed: {:.2f}%\".format((countNo / (len(df.Self_Employed))*100)))\n",
        "print(\"Percentage of self employed: {:.2f}%\".format((countYes / (len(df.Self_Employed))*100)))\n",
        "print(\"Missing values percentage: {:.2f}%\".format((countNull / (len(df.Self_Employed))*100)))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "queHOThe6nzn",
        "outputId": "358f008a-411b-434d-80eb-0a67ccb30e1f"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Percentage of Not self employed: 81.43%\n",
            "Percentage of self employed: 13.36%\n",
            "Missing values percentage: 5.21%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.crosstab(df.Self_Employed,df.Credit_History).plot(kind=\"bar\", stacked=True, figsize=(5,5), color=['#544a7d','#ffd452'])\n",
        "plt.title('Self Employed vs Credit History')\n",
        "plt.xlabel('Self Employed')\n",
        "plt.ylabel('Frequency')\n",
        "plt.legend([\"Bad Credit\", \"Good Credit\"])\n",
        "plt.xticks(rotation=0)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "id": "bJ422V5i6n-X",
        "outputId": "c15b1e25-d59d-4fc3-a93a-492bd5bf8446"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(x=\"Loan_Status\", y=\"ApplicantIncome\", data=df, palette=\"rocket\");"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        },
        "id": "cNjnGcXE6oLD",
        "outputId": "2a7c446d-597c-4a8c-9e40-7525c3f0406b"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        },
        "id": "_J3nzk_REZTw",
        "outputId": "65c20efd-6560-431c-8825-caa80b92d0e3"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
              "count       614.000000         614.000000  592.000000         600.00000   \n",
              "mean       5403.459283        1621.245798  146.412162         342.00000   \n",
              "std        6109.041673        2926.248369   85.587325          65.12041   \n",
              "min         150.000000           0.000000    9.000000          12.00000   \n",
              "25%        2877.500000           0.000000  100.000000         360.00000   \n",
              "50%        3812.500000        1188.500000  128.000000         360.00000   \n",
              "75%        5795.000000        2297.250000  168.000000         360.00000   \n",
              "max       81000.000000       41667.000000  700.000000         480.00000   \n",
              "\n",
              "       Credit_History  \n",
              "count      564.000000  \n",
              "mean         0.842199  \n",
              "std          0.364878  \n",
              "min          0.000000  \n",
              "25%          1.000000  \n",
              "50%          1.000000  \n",
              "75%          1.000000  \n",
              "max          1.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-049a0b87-7faa-4912-8f0b-79fcf5c11e8d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ApplicantIncome</th>\n",
              "      <th>CoapplicantIncome</th>\n",
              "      <th>LoanAmount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>614.000000</td>\n",
              "      <td>614.000000</td>\n",
              "      <td>592.000000</td>\n",
              "      <td>600.00000</td>\n",
              "      <td>564.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>5403.459283</td>\n",
              "      <td>1621.245798</td>\n",
              "      <td>146.412162</td>\n",
              "      <td>342.00000</td>\n",
              "      <td>0.842199</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>6109.041673</td>\n",
              "      <td>2926.248369</td>\n",
              "      <td>85.587325</td>\n",
              "      <td>65.12041</td>\n",
              "      <td>0.364878</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>150.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>9.000000</td>\n",
              "      <td>12.00000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2877.500000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>100.000000</td>\n",
              "      <td>360.00000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3812.500000</td>\n",
              "      <td>1188.500000</td>\n",
              "      <td>128.000000</td>\n",
              "      <td>360.00000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>5795.000000</td>\n",
              "      <td>2297.250000</td>\n",
              "      <td>168.000000</td>\n",
              "      <td>360.00000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>81000.000000</td>\n",
              "      <td>41667.000000</td>\n",
              "      <td>700.000000</td>\n",
              "      <td>480.00000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-049a0b87-7faa-4912-8f0b-79fcf5c11e8d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-049a0b87-7faa-4912-8f0b-79fcf5c11e8d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-049a0b87-7faa-4912-8f0b-79fcf5c11e8d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uK-B2qiUKPLR",
        "outputId": "1e170df3-724b-44e9-88a7-3ddf914b12e8"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Loan_ID               0\n",
              "Gender               13\n",
              "Married               3\n",
              "Dependents           15\n",
              "Education             0\n",
              "Self_Employed        32\n",
              "ApplicantIncome       0\n",
              "CoapplicantIncome     0\n",
              "LoanAmount           22\n",
              "Loan_Amount_Term     14\n",
              "Credit_History       50\n",
              "Property_Area         0\n",
              "Loan_Status           0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        ""
      ],
      "metadata": {
        "id": "wB_1tiZD2N6n"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df=df.dropna()"
      ],
      "metadata": {
        "id": "vI5vswRDKfuZ"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.replace({\"Loan_Status\":{'N':0,'Y':1}},inplace=True)"
      ],
      "metadata": {
        "id": "5espW7J7MiwX"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 288
        },
        "id": "3G2Fqp3CMm0V",
        "outputId": "2e4bfed1-d6e5-42dd-bd16-428dc1e16efc"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Loan_ID Gender Married Dependents     Education Self_Employed  \\\n",
              "1  LP001003   Male     Yes          1      Graduate            No   \n",
              "2  LP001005   Male     Yes          0      Graduate           Yes   \n",
              "3  LP001006   Male     Yes          0  Not Graduate            No   \n",
              "4  LP001008   Male      No          0      Graduate            No   \n",
              "5  LP001011   Male     Yes          2      Graduate           Yes   \n",
              "\n",
              "   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
              "1             4583             1508.0       128.0             360.0   \n",
              "2             3000                0.0        66.0             360.0   \n",
              "3             2583             2358.0       120.0             360.0   \n",
              "4             6000                0.0       141.0             360.0   \n",
              "5             5417             4196.0       267.0             360.0   \n",
              "\n",
              "   Credit_History Property_Area  Loan_Status  \n",
              "1             1.0         Rural            0  \n",
              "2             1.0         Urban            1  \n",
              "3             1.0         Urban            1  \n",
              "4             1.0         Urban            1  \n",
              "5             1.0         Urban            1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8d15c815-f1bc-41d8-9d78-41ff9c55a714\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loan_ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Married</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>Education</th>\n",
              "      <th>Self_Employed</th>\n",
              "      <th>ApplicantIncome</th>\n",
              "      <th>CoapplicantIncome</th>\n",
              "      <th>LoanAmount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "      <th>Property_Area</th>\n",
              "      <th>Loan_Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>LP001003</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>1</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>4583</td>\n",
              "      <td>1508.0</td>\n",
              "      <td>128.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Rural</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>LP001005</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>3000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>66.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>LP001006</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>0</td>\n",
              "      <td>Not Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>2583</td>\n",
              "      <td>2358.0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>LP001008</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>No</td>\n",
              "      <td>6000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>141.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>LP001011</td>\n",
              "      <td>Male</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2</td>\n",
              "      <td>Graduate</td>\n",
              "      <td>Yes</td>\n",
              "      <td>5417</td>\n",
              "      <td>4196.0</td>\n",
              "      <td>267.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Urban</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8d15c815-f1bc-41d8-9d78-41ff9c55a714')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8d15c815-f1bc-41d8-9d78-41ff9c55a714 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8d15c815-f1bc-41d8-9d78-41ff9c55a714');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['Dependents'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7Sp6UV6bM_z4",
        "outputId": "47ed9a6e-7198-416f-9093-ac8ddcf06f56"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0     274\n",
              "2      85\n",
              "1      80\n",
              "3+     41\n",
              "Name: Dependents, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.replace(to_replace='3+', value=4)"
      ],
      "metadata": {
        "id": "Tmci6D6ANLdu"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df['Dependents'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4vaUprVrNqRF",
        "outputId": "ba4628c9-0baf-4e74-e711-99e6a2108758"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    274\n",
              "2     85\n",
              "1     80\n",
              "4     41\n",
              "Name: Dependents, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.replace({'Married':{'No':0,'Yes':1},'Gender':{'Male':1,'Female':0},'Self_Employed':{'No':0,'Yes':1},\n",
        "                      'Property_Area':{'Rural':0,'Semiurban':1,'Urban':2},'Education':{'Graduate':1,'Not Graduate':0}},inplace=True)"
      ],
      "metadata": {
        "id": "jop0fx6UOO5Z"
      },
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "IvNa-XuHOVr1",
        "outputId": "63d663de-a8e1-487f-afc3-3cb6e784a5fa"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Loan_ID  Gender  Married Dependents  Education  Self_Employed  \\\n",
              "1  LP001003       1        1          1          1              0   \n",
              "2  LP001005       1        1          0          1              1   \n",
              "3  LP001006       1        1          0          0              0   \n",
              "4  LP001008       1        0          0          1              0   \n",
              "5  LP001011       1        1          2          1              1   \n",
              "\n",
              "   ApplicantIncome  CoapplicantIncome  LoanAmount  Loan_Amount_Term  \\\n",
              "1             4583             1508.0       128.0             360.0   \n",
              "2             3000                0.0        66.0             360.0   \n",
              "3             2583             2358.0       120.0             360.0   \n",
              "4             6000                0.0       141.0             360.0   \n",
              "5             5417             4196.0       267.0             360.0   \n",
              "\n",
              "   Credit_History  Property_Area  Loan_Status  \n",
              "1             1.0              0            0  \n",
              "2             1.0              2            1  \n",
              "3             1.0              2            1  \n",
              "4             1.0              2            1  \n",
              "5             1.0              2            1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-519937fb-042d-4217-8652-f3057464dd7a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Loan_ID</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Married</th>\n",
              "      <th>Dependents</th>\n",
              "      <th>Education</th>\n",
              "      <th>Self_Employed</th>\n",
              "      <th>ApplicantIncome</th>\n",
              "      <th>CoapplicantIncome</th>\n",
              "      <th>LoanAmount</th>\n",
              "      <th>Loan_Amount_Term</th>\n",
              "      <th>Credit_History</th>\n",
              "      <th>Property_Area</th>\n",
              "      <th>Loan_Status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>LP001003</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>4583</td>\n",
              "      <td>1508.0</td>\n",
              "      <td>128.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>LP001005</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>3000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>66.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>LP001006</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2583</td>\n",
              "      <td>2358.0</td>\n",
              "      <td>120.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>LP001008</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>6000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>141.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>LP001011</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5417</td>\n",
              "      <td>4196.0</td>\n",
              "      <td>267.0</td>\n",
              "      <td>360.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-519937fb-042d-4217-8652-f3057464dd7a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-519937fb-042d-4217-8652-f3057464dd7a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-519937fb-042d-4217-8652-f3057464dd7a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.drop(columns=['Loan_ID','Loan_Status'],axis=1)\n",
        "Y = df['Loan_Status']"
      ],
      "metadata": {
        "id": "SKzm0RrXOrV_"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(X)\n",
        "print(Y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "svgS_yGFO3cX",
        "outputId": "3be1a0c5-8e8b-4a06-bb37-c06c9c195774"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "     Gender  Married Dependents  Education  Self_Employed  ApplicantIncome  \\\n",
            "1         1        1          1          1              0             4583   \n",
            "2         1        1          0          1              1             3000   \n",
            "3         1        1          0          0              0             2583   \n",
            "4         1        0          0          1              0             6000   \n",
            "5         1        1          2          1              1             5417   \n",
            "..      ...      ...        ...        ...            ...              ...   \n",
            "609       0        0          0          1              0             2900   \n",
            "610       1        1          4          1              0             4106   \n",
            "611       1        1          1          1              0             8072   \n",
            "612       1        1          2          1              0             7583   \n",
            "613       0        0          0          1              1             4583   \n",
            "\n",
            "     CoapplicantIncome  LoanAmount  Loan_Amount_Term  Credit_History  \\\n",
            "1               1508.0       128.0             360.0             1.0   \n",
            "2                  0.0        66.0             360.0             1.0   \n",
            "3               2358.0       120.0             360.0             1.0   \n",
            "4                  0.0       141.0             360.0             1.0   \n",
            "5               4196.0       267.0             360.0             1.0   \n",
            "..                 ...         ...               ...             ...   \n",
            "609                0.0        71.0             360.0             1.0   \n",
            "610                0.0        40.0             180.0             1.0   \n",
            "611              240.0       253.0             360.0             1.0   \n",
            "612                0.0       187.0             360.0             1.0   \n",
            "613                0.0       133.0             360.0             0.0   \n",
            "\n",
            "     Property_Area  \n",
            "1                0  \n",
            "2                2  \n",
            "3                2  \n",
            "4                2  \n",
            "5                2  \n",
            "..             ...  \n",
            "609              0  \n",
            "610              0  \n",
            "611              2  \n",
            "612              2  \n",
            "613              1  \n",
            "\n",
            "[480 rows x 11 columns]\n",
            "1      0\n",
            "2      1\n",
            "3      1\n",
            "4      1\n",
            "5      1\n",
            "      ..\n",
            "609    1\n",
            "610    1\n",
            "611    1\n",
            "612    1\n",
            "613    0\n",
            "Name: Loan_Status, Length: 480, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.1,stratify=Y,random_state=2)"
      ],
      "metadata": {
        "id": "8-ra1RDKO7_a"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(X.shape, X_train.shape, X_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aI39_c8aPBXC",
        "outputId": "9f8674a4-2085-4469-a5b7-3e2c45a4f035"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(480, 11) (432, 11) (48, 11)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = LogisticRegression(solver='saga', max_iter=500, random_state=1)\n",
        "df.fit(X_train, Y_train)\n",
        "\n",
        "y_pred = df.predict(X_test)\n",
        "\n",
        "print(classification_report(Y_test, y_pred))\n",
        "print(confusion_matrix(Y_test, y_pred))\n",
        "\n",
        "from sklearn.metrics import accuracy_score\n",
        "LRAcc = accuracy_score(y_pred,Y_test)\n",
        "print('LR accuracy: {:.2f}%'.format(LRAcc*100))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qz80lEu-Rheg",
        "outputId": "282b2c60-c397-426b-fc57-038d6dc92157"
      },
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.00      0.00      0.00        15\n",
            "           1       0.69      1.00      0.81        33\n",
            "\n",
            "    accuracy                           0.69        48\n",
            "   macro avg       0.34      0.50      0.41        48\n",
            "weighted avg       0.47      0.69      0.56        48\n",
            "\n",
            "[[ 0 15]\n",
            " [ 0 33]]\n",
            "LR accuracy: 68.75%\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_sag.py:354: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  ConvergenceWarning,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        }
      ]
    }
  ]
}